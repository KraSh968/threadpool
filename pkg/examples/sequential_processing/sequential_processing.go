package sequentialprocessing

import (
	"fmt"
	"threadpool_example/pkg/data"
)

// Обычная последовательная обработка данных.
// Достоинства:
//   - Имеет выигрыш в производительности при малом количестве однотипных простых операций
//     за счет экономии на работе планировщика
//
// Проблемы:
//   - Неэффективное использование ресурсов - большинство современных систем многопроцессорные,
//     что в данном примере игнорируется
func RunBaseExample() {
	fmt.Println("Запуск примера с последовательной обработкой...")

	const inputSize = 1_000_000
	fmt.Printf("Кол-во значение: %d\n", inputSize)

	ints := *data.GenerateInts(inputSize)

	processed := 0
	for i := 0; i < len(ints); i++ {
		// Обработка значений в цикле и запись в переменную в одном месте
		ints[i] *= 2
		processed++
	}
	fmt.Printf("Обработано %d значений\n", processed)
}
